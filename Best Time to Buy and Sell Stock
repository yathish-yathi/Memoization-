tags : Easy, T O(n), S O(1)
link : https://leetcode.com/problems/best-time-to-buy-and-sell-stock/

class Solution {

    //cosider 0th price as bestbuy since we dont know next day's price so init profit
    //and maxprofit to 0
    public int maxProfit(int[] prices) {
        int bestBuy=prices[0];
        int profit=0;
        int maxProfit=0;
        int n=prices.length;

        //we traverse from 1 to n-1
        //if cur price is less than previously bought price, then update bestBuy 
        //(lower the buy price highest the profit)
        //no need to calculate when cur price is lower than buying price because 
        //it will be loss(-ve profit) and profit will no be updated
        for(int cur=0; cur<n; cur++){
            if(prices[cur]<bestBuy){
                //since current day price is less which make it best buy
                bestBuy=prices[cur];
            }else{
                //else if price is higher than buying price then we will try to sell
                //and find profit and update maximum profit
                profit=prices[cur]-bestBuy;
                maxProfit=Math.max(maxProfit,profit);
            }
        }
        return maxProfit;
    }
}

//problem//
You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 104
